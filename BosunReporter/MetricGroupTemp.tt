<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Reflection;

namespace BosunReporter
{
<#
	for (int dimensions = 1; dimensions < 6; dimensions++)
	{
		var typeNamesArray = new string[dimensions];
		var thisArgsArray = new string[dimensions];
		var tagListArray = new string[dimensions];
		var typeOfArray = new string[dimensions];
		for (var i = 1; i <= dimensions; i++)
		{
			typeNamesArray[i - 1] = "T" + i;
			thisArgsArray[i - 1] = "T" + i + " tag" + i;
			tagListArray[i - 1] = "tag" + i;
			typeOfArray[i - 1] = "typeof(T" + i + ")";
		}

		var typeList = String.Join(", ", typeNamesArray);
		var thisArgs = String.Join(", ", thisArgsArray);
		var tagList = String.Join(", ", tagListArray);
		var typeOfList = String.Join(", ", typeOfArray);
		var dictionaryKeyType = dimensions > 1 ? "Tuple<" + typeList + ">" : "T1";
		var dictionaryType = "Dictionary<" + dictionaryKeyType + ", TMetric>";
		var factoryType = "Func<" + typeList + ", TMetric>";
		var dictionaryKeyValue = dimensions == 1 ? tagList : "key";
		var tryGetStatement = dimensions == 1 ? "if (_metrics.TryGetValue("+ tagList +", out metric))" : "if (_metrics.TryGetValue(key, out metric))";

#>
	public class MetricGroupTemp<<#= typeList #>, TMetric> where TMetric : BosunMetric
	{
		private readonly object _dictionaryLock = new object();
		private readonly MetricsCollector _collector;
		private readonly string _name;
		private readonly <#= dictionaryType #> _metrics = new Dictionary<<#= dictionaryKeyType #>, TMetric>();
		private readonly <#= factoryType #> _metricFactory;
		
		public MetricGroupTemp(MetricsCollector collector, string name, <#= factoryType #> metricFactory = null)
		{
			_collector = collector;
			_name = name;
			_metricFactory = metricFactory ?? GetDefaultFactory();
		}

		public TMetric this[<#= thisArgs #>]
		{
			get
			{
<# if (dimensions > 1) { #>
				var key = new <#= dictionaryKeyType #>(<#= tagList #>);
<# } #>
				return _metrics[<#= dictionaryKeyValue #>];
			}
		}
		
		/// <summary>
		/// Adds a metric to the group, if it doesn't already exist.
		/// </summary>
		/// <returns>The metric.</returns>
		public TMetric Add(<#= thisArgs #>)
		{
			bool isNew;
			return Add(<#= tagList #>, out isNew);
		}
		
		/// <summary>
		/// Adds a metric to the group, if it doesn't already exist.
		/// </summary>
		/// <returns>The metric.</returns>
		public TMetric Add(<#= thisArgs #>, out bool isNew)
		{
			isNew = false;
<# if (dimensions > 1) { #>
			var key = new <#= dictionaryKeyType #>(<#= tagList #>);
<# } #>
			if (_metrics.ContainsKey(<#= dictionaryKeyValue #>))
				return _metrics[<#= dictionaryKeyValue #>];

			lock (_dictionaryLock)
			{
				if (_metrics.ContainsKey(<#= dictionaryKeyValue #>))
					return _metrics[<#= dictionaryKeyValue #>];
				
				isNew = true;
				TMetric metric = _collector.GetMetric(_name, _metricFactory(<#= tagList #>));
				_metrics[<#= dictionaryKeyValue #>] = metric;
				return metric;
			}
		}

		public bool Contains(<#= thisArgs #>)
		{
<# if (dimensions > 1) { #>
			var key = new <#= dictionaryKeyType #>(<#= tagList #>);
<# } #>
			return _metrics.ContainsKey(<#= dictionaryKeyValue #>);
		}

		public <#= factoryType #> GetDefaultFactory()
		{
			var constructor = typeof(TMetric).GetConstructor(BindingFlags.Instance | BindingFlags.Public, null, new []{ <#= typeOfList #> }, null);
            if (constructor == null)
            {
				throw new Exception(
					String.Format(
						"Cannot create a MetricGroup for Type \"{0}\". It does not have a constructor which matches the signature of types provided to the metric group. " +
						"Either add a constructor with that signature, or use the metricFactory argument to define a custom factory.",
						typeof(TMetric).FullName));
            }

			return (<#= tagList #>) => (TMetric)constructor.Invoke(new object[] { <#= tagList #> });
		}
	}

<#
	} // end template for loop
#>
}